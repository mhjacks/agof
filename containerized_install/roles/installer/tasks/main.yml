---
# https://access.redhat.com/articles/3626371#bgenerating-an-access-tokenb-4
#
# equivalent of 
# curl https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token -d grant_type=refresh_token -d client_id=rhsm-api -d refresh_token=$offline_token
- name: Generating an access token
  ansible.builtin.uri:
    url: https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token
    method: POST
    body_format: form-urlencoded
    return_content: true
    body:
      grant_type: "refresh_token"
      client_id: "rhsm-api"
      refresh_token: "{{ offline_token }}"
  register: temp_token
  until: temp_token is not failed
  retries: 15
  delay: 20

# example sha: 0046367b76d7c3aca0d311a05935acd667438dfe9640db16f5027952d46dc470
# curl -H "Authorization: Bearer $token"  "https://api.access.redhat.com/management/v1/images/{{ provided_sha_value }}/download"
# curl -H "Authorization: Bearer $token"  "https://api.access.redhat.com/management/v1/images/0046367b76d7c3aca0d311a05935acd667438dfe9640db16f5027952d46dc470/download"
- name: Download containerized installer
  ansible.builtin.get_url:
    url: "https://api.access.redhat.com/management/v1/images/{{ containerized_installer_shasum }}/download"
    headers:
      accept: "application/json"
      Authorization: "Bearer {{ temp_token.json.access_token }}"
    dest: "{{ containerized_installer_user_home }}/aap_installer.tar.gz"
    checksum: "sha256: {{ containerized_installer_shasum }}"
  register: download_installer_tarball
  until: download_installer_tarball is not failed
  retries: 15
  delay: 20

- name: Extract containerized installer
  ansible.builtin.unarchive:
    src: "{{ containerized_installer_user_home }}/aap_installer.tar.gz"
    dest: "{{ containerized_installer_user_home }}"
    owner: "{{ containerized_installer_user }}"
    group: "{{ containerized_installer_user }}"
    remote_src: true

- name: Determine install directory
  ansible.builtin.find:
    paths: "{{ containerized_installer_user_home }}"
    file_type: directory
    use_regex: true
    patterns:
      - 'ansible-automation-platform-containerized-setup'
  register: aap_directories

- name: Set directory fact
  ansible.builtin.set_fact:
    aap_installer_dir: "{{ (aap_directories.files | sort(attribute='mtime', reverse=true) | first).path }}"

- name: Determine controller_fqdn from inside the user environment
  ansible.builtin.command: |-
    hostname -f
  register: local_hostname

- name: Set controller_fqdn to local hostname
  ansible.builtin.set_fact:
    controller_fqdn: "{{ local_hostname.stdout | trim }}"

- name: Template inventory file
  ansible.builtin.template:
    src: containerized_install_inventory.j2
    dest: "{{ aap_installer_dir }}/inventory"
    owner: "{{ containerized_installer_user }}"
    group: "{{ containerized_installer_user }}"
    mode: "0600"

- name: Copy manifest
  ansible.builtin.copy:
    content: "{{ manifest_content | b64decode }}"
    dest: "{{ controller_license_file }}"
    owner: "{{ containerized_installer_user }}"
    group: "{{ containerized_installer_user }}"
    mode: "0600"

- name: Copy agof vault to installer system
  ansible.builtin.copy:
    src: ~/agof_vault.yml
    dest: "{{ aap_installer_dir }}/agof_vault.yml"
    owner: "{{ containerized_installer_user }}"
    group: "{{ containerized_installer_user }}"
    mode: "0600"

- name: Run installer
  ansible.builtin.command:
    chdir: "{{ aap_installer_dir }}"
    cmd: |-
      ansible-playbook -i inventory ansible.containerized_installer.install -e @agof_vault.yml
  async: 3600
  poll: 15
