---
- name: Debug
  ansible.builtin.debug:
    var: controller_hostname

- name: "Checkout infrastructure-as-code directory"
  ansible.builtin.git:
    repo: "{{ agof_iac_repo }}"
    version: "{{ agof_iac_repo_version | default('main') }}"
    dest: "{{ agof_controller_config_dir }}"
    force: true
    clone: true
    update: true
    recursive: true

- name: Include vars from configs directory
  ansible.builtin.include_vars:
    dir: "{{ agof_controller_config_dir }}"
    ignore_unknown_extensions: true
    extensions:
      - "json"
      - "yaml"
      - "yml"
  tags:
    - always

- name: Wait for Automation Controller to be up
  ansible.builtin.uri:
    url: 'https://{{ controller_hostname }}:{{ controller_port }}/api/v2/ping/'
    method: GET
    user: '{{ admin_user | default("admin") }}'
    password: "{{ admin_password }}"
    validate_certs: false
  register: check2
  until: check2.json is defined and check2.json.instances[0].capacity > 0 and check2.json.instance_groups[0].capacity > 0
  retries: 60
  delay: 10

- name: Display /api/v2/ping results
  ansible.builtin.debug:
    msg: '{{ check2.json }}'

- name: Default to entitlement
  ansible.builtin.set_fact:
    entitle_aap: true

- name: Entitle AAP if needed
  block:
    # AAP will have an empty license_info block if it hasn't been entitled
    # of course we expect to entitle it through the containerized installer
    # But in case we didn't use the containerized installer, we have this check
    # and this block as a failsafe
    - name: Check on current license_info status
      ansible.builtin.uri:
        url: 'https://{{ controller_hostname }}:{{ controller_port }}/api/v2/config/'
        method: GET
        user: '{{ admin_user | default("admin") }}'
        password: "{{ admin_password }}"
        validate_certs: false
        force_basic_auth: true
      register: config_check

    - name: Debug license_info status
      ansible.builtin.debug:
        var: config_check

    - name: Turn off entitlement if needed
      ansible.builtin.set_fact:
        entitle_aap: false
      when:
        - config_check.json.license_info.valid_key

  rescue:
    - name: Notify that we are going to entitle
      ansible.builtin.debug:
        msg: "Caught an exception, entitling"

- name: Post manifest file if needed
  ansible.builtin.uri:
    url: 'https://{{ controller_hostname }}:{{ controller_port }}/api/v2/config/'
    method: POST
    user: '{{ admin_user | default("admin") }}'
    password: "{{ admin_password }}"
    body: '{ "eula_accepted": true, "manifest": "{{ manifest_content }}" }'
    body_format: json
    validate_certs: false
    force_basic_auth: true
  when: entitle_aap
  register: license_controller
  until: license_controller is not failed
  retries: 5

- name: Consolidate controller_hostname
  ansible.builtin.set_fact:
    controller_hostname: "https://{{ controller_hostname }}:{{ controller_port }}"

- name: Set gateway vars
  ansible.builtin.set_fact:
      gateway_state: "{{ controller_state }}"
      gateway_hostname: "{{ controller_hostname }}"
      gateway_validate_certs: "{{ controller_validate_certs }}"
      gateway_username: "{{ controller_username }}"
      gateway_request_timeout: "{{ controller_request_timeout }}"
      gateway_configuration_async_dir: "{{ controller_configuration_async_dir }}"

- name: Debug infra.controller_configuration.dispatch common variables
  ansible.builtin.debug:
    msg:
      - "controller_state: {{ controller_state }}"
      - "controller_hostname: {{ controller_hostname }}"
      - "controller_port: {{ controller_port }}"
      - "controller_validate_certs: {{ controller_validate_certs }}"
      - "controller_username: {{ controller_username }}"
      - "controller_request_timeout: {{ controller_request_timeout }}"
      - "controller_configuration_async_dir: {{ controller_configuration_async_dir }}"
      - "gateway_state: {{ gateway_state }}"
      - "gateway_hostname: {{ gateway_hostname }}"
      - "gateway_port: {{ gateway_port }}"
      - "gateway_validate_certs: {{ gateway_validate_certs }}"
      - "gateway_username: {{ gateway_username }}"
      - "gateway_request_timeout: {{ gateway_request_timeout }}"
      - "gateway_configuration_async_dir: {{ gateway_configuration_async_dir }}"
  when:
    - agof_configure_aap_debug

- name: "Configure AAP Platform/Gateway"
  ansible.builtin.include_role:
    name: infra.platform_configuration.organizations
  vars:
    gateway_organizations: '{{ organizations }}'

- name: "Configure AAP Controller"
  ansible.builtin.include_role:
    #name: redhat_cop.controller_configuration.dispatch
    name: infra.controller_configuration.dispatch

- name: "Configure AAP EDA Controller"
  ansible.builtin.include_role:
    name: infra.eda_configuration.dispatch

- name: "Configure AAP Automation Hub"
  ansible.builtin.include_role:
    name: infra.ah_configuration.dispatch
